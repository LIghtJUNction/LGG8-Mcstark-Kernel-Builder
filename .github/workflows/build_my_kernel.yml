jobs:
  Build-Kernel:
    name: "编译内核"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: vendor/alpha_lao_com-perf_defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    
    steps:
      - name: "✨ 创建工作目录"
        run: mkdir -p $kernelDir

      - name: "Restore dependencies cache"
        id: restore-deps-cache
        uses: actions/cache@v3
        with:
          path: /usr/bin/dtc
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: "⭐ 安装依赖"
        if: steps.restore-deps-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -qq > /dev/null
          sudo apt-get install -y build-essential device-tree-compiler bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools > /dev/null 2>&1

      - name: "Cache dependencies"
        uses: actions/cache@v4
        with:
          path: /usr/bin/dtc
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: "Restore kernel source cache"
        id: restore-kernel-cache
        uses: actions/cache@v4
        with:
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}
          key: ${{ runner.os }}-kernel-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-kernel-

      - name: "克隆内核源码 => (${{ env.kernelRepo }})"
        if: steps.restore-kernel-cache.outputs.cache-hit != 'true'
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "Cache kernel source"
        uses: actions/cache@v4
        with:
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}
          key: ${{ runner.os }}-kernel-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: "Restore toolchain cache"
        id: restore-toolchain-cache
        uses: actions/cache@v3
        with:
          path: ./${{ env.kernelDir }}/toolchains
          key: ${{ runner.os }}-toolchain-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-toolchain-

      - name: "获取工具链"
        if: steps.restore-toolchain-cache.outputs.cache-hit != 'true'
        working-directory: ./${{ env.kernelDir }}
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.2/clang+llvm-17.0.2-x86_64-linux-gnu-ubuntu-22.04.tar.xz > /dev/null 2>&1
          tar -xf clang+llvm-17.0.2-x86_64-linux-gnu-ubuntu-22.04.tar.xz > /dev/null
          mv clang+llvm-17.0.2-x86_64-linux-gnu-ubuntu-22.04 toolchains
          rm clang+llvm-17.0.2-x86_64-linux-gnu-ubuntu-22.04.tar.xz
          echo "$(pwd)/toolchains/" >> $GITHUB_PATH
          echo "$(pwd)/toolchains/bin" >> $GITHUB_PATH

      - name: "Cache toolchain"
        uses: actions/cache@v4
        with:
          path: ./${{ env.kernelDir }}/toolchains
          key: ${{ runner.os }}-toolchain-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: "Check toolchain version"
        run: |
          aarch64-linux-gnu-gcc --version
          aarch64-linux-gnu-objdump --version
